@model SistemaTickets.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container mt-4">
    <h2 class="mb-4">Panel de Seguimiento de Tickets</h2>

    <div class="row">
        <div class="col-md-4">
            <div class="card text-white bg-primary mb-3 shadow">
                <div class="card-body">
                    <h5 class="card-title">Tickets Abiertos</h5>
                    <p class="card-text display-6">@Model.TotalAbiertos</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-warning mb-3 shadow">
                <div class="card-body">
                    <h5 class="card-title">En Progreso</h5>
                    <p class="card-text display-6">@Model.TotalEnProgreso</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-success mb-3 shadow">
                <div class="card-body">
                    <h5 class="card-title">Tickets Resueltos</h5>
                    <p class="card-text display-6">@Model.TotalResueltos</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header">Estado de los Tickets</div>
                <div class="card-body">
                    <canvas id="estadoChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header">Tickets por Categoría</div>
                <div class="card-body">
                    <canvas id="categoriaChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header">Tickets por Día de la Semana</div>
                <div class="card-body">
                    <canvas id="semanaChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header">Tickets por Usuario</div>
                <div class="card-body">
                    <canvas id="usuarioChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- NUEVO: Gráficos por Categoría - Promedio Tiempo de Resolución por Usuario -->
    <div class="row mt-4">
        <div class="col-12">
            <h4 class="mb-3">Promedio de Tiempo de Resolución por Usuario y Categoría (últimos 30 días)</h4>
        </div>

        @foreach (var categoria in Model.TiemposResolucionPorCategoriaUsuario)
        {
            var categoriaId = categoria.Key;
            var usuarios = categoria.Value;
            var nombreCategoria = Model.NombresCategorias.ContainsKey(categoriaId)
            ? Model.NombresCategorias[categoriaId]
            : $"Categoría {categoriaId}";

            <div class="col-md-6 mb-4">
                <div class="card shadow">
                    <div class="card-header">@nombreCategoria</div>
                    <div class="card-body">
                        <canvas id="categoriaUsuarioChart_@categoriaId"></canvas>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    const estadoChart = new Chart(document.getElementById('estadoChart'), {
        type: 'pie',
        data: {
            labels: ['Abiertos', 'En Progreso', 'Resueltos'],
            datasets: [{
                data: [@Model.TotalAbiertos, @Model.TotalEnProgreso, @Model.TotalResueltos],
                backgroundColor: ['#007bff', '#ffc107', '#28a745']
            }]
        }
    });

    const categoriaChart = new Chart(document.getElementById('categoriaChart'), {
        type: 'bar',
        data: {
            labels: [
    @Html.Raw(string.Join(",",
                 Model.TicketsPorCategoria.Keys.Select(k =>
                     $"\"{(Model.NombresCategorias.ContainsKey(int.Parse(k)) ? Model.NombresCategorias[int.Parse(k)] : $"Categoría {k}")}\""
                 )
             ))
            ],
            datasets: [{
                label: 'Tickets',
                data: [@string.Join(",", Model.TicketsPorCategoria.Values)],
                backgroundColor: '#17a2b8'
            }]
        }
    });

    const semanaChart = new Chart(document.getElementById('semanaChart'), {
        type: 'line',
        data: {
            labels: [@Html.Raw(string.Join(",", Model.TicketsPorDiaSemana.Keys.Select(k => $"\"{k}\"")))],
            datasets: [{
                label: 'Tickets',
                data: [@string.Join(",", Model.TicketsPorDiaSemana.Values)],
                borderColor: '#6610f2',
                fill: false
            }]
        }
    });

    const usuarioChart = new Chart(document.getElementById('usuarioChart'), {
        type: 'bar',
        data: {
            labels: [@Html.Raw(string.Join(",", Model.TicketsPorUsuario.Keys.Select(k => $"\"Usuario {k}\"")))],
            datasets: [{
                label: 'Tickets',
                data: [@string.Join(",", Model.TicketsPorUsuario.Values)],
                backgroundColor: '#fd7e14'
            }]
        }
    });

    // Gráficos dinámicos por categoría y usuario
    @foreach (var categoria in Model.TiemposResolucionPorCategoriaUsuario)
    {
        var categoriaId = categoria.Key;
        var usuarios = categoria.Value;

        var labels = string.Join(",", usuarios.Keys.Select(u => $"\"Usuario {u}\""));
        var data = string.Join(",", usuarios.Values.Select(v => v.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)));

        <text>
                new Chart(document.getElementById('categoriaUsuarioChart_@categoriaId'), {
                    type: 'bar',
                    data: {
                        labels: [@Html.Raw(labels)],
                        datasets: [{
                            label: 'Promedio Horas',
                            data: [@Html.Raw(data)],
                            backgroundColor: '#20c997'
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Horas'
                                }
                            }
                        }
                    }
                });
        </text>
    }
</script>
